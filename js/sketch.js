"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var StarDodge, draw, setup, stardodge;

stardodge = null;

StarDodge = function () {
  function StarDodge() {
    var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var d1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;

    _classCallCheck(this, StarDodge);

    this.level = level;
    this.d = d1;
    this.startNewGame(1);
  }

  _createClass(StarDodge, [{
    key: "startNewGame",
    value: function startNewGame(dlevel) {
      var d, i, j, k, l, len, len1, len2, m, ref, ref1, ref2, x, y;
      if (dlevel === 1) {
        this.stars = [];
        d = this.d / 2;
        ref = range(1, height / this.d);
        for (k = 0, len = ref.length; k < len; k++) {
          j = ref[k];
          ref1 = range(1, width / this.d);
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            i = ref1[l];
            this.stars.push([this.d * i + int(random(-d, d)), this.d * j + int(random(-d, d))]);
          }
        }
      }
      this.level += dlevel;
      var _ref = [0, height / 2];
      this.x = _ref[0];
      this.y = _ref[1];

      bg(0.5);
      fc(1, 1, 0);
      sc();
      ref2 = this.stars;
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        var _ref2$m = _slicedToArray(ref2[m], 2);

        x = _ref2$m[0];
        y = _ref2$m[1];

        circle(x, y, this.level);
      }
      rect(width - 3, 0.4 * height, 2, 0.2 * height);
      textAlign(CENTER, CENTER);
      textSize(height);
      fc(1, 1, 1, 0.5);
      sc();
      return text(this.level, width / 2, height / 2);
    }
  }, {
    key: "draw",
    value: function draw() {
      var k, len, ref, ref1, x, y;
      var _ref2 = [this.x + 1, this.y + (mouseIsPressed || keyIsDown(32) ? 1 : -1)];
      this.x = _ref2[0];
      this.y = _ref2[1];

      sc(0);
      sw(1.5);
      point(this.x, this.y);
      if (this.x > width && 0.4 * height < (ref = this.y) && ref < 0.6 * height) {
        return this.startNewGame(1);
      }
      if (this.y < 0 || this.y > height || this.x > width) {
        return this.startNewGame(0);
      }
      ref1 = this.stars;
      for (k = 0, len = ref1.length; k < len; k++) {
        var _ref1$k = _slicedToArray(ref1[k], 2);

        x = _ref1$k[0];
        y = _ref1$k[1];

        if (dist(this.x, this.y, x, y) < this.level) {
          return this.startNewGame(0);
        }
      }
    }
  }]);

  return StarDodge;
}();

setup = function setup() {
  createCanvas(windowWidth, windowHeight);
  return stardodge = new StarDodge();
};

draw = function draw() {
  return stardodge.draw();
};
//# sourceMappingURL=sketch.js.map
